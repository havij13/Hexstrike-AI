FROM kalilinux/kali-rolling:latest

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    HEXSTRIKE_PORT=8888 \
    HEXSTRIKE_HOST=0.0.0.0 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Update system and install core dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    python3-wheel \
    git \
    curl \
    wget \
    unzip \
    build-essential \
    libssl-dev \
    libffi-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install security tools in batches to handle failures gracefully
RUN apt-get update && apt-get install -y \
    nmap \
    gobuster \
    nikto \
    sqlmap \
    hydra \
    john \
    hashcat \
    || echo "Some core tools failed to install, continuing..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    masscan \
    amass \
    subfinder \
    fierce \
    dnsenum \
    theharvester \
    responder \
    enum4linux-ng \
    || echo "Some network tools failed to install, continuing..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    ffuf \
    dirb \
    dirsearch \
    nuclei \
    wpscan \
    httpx-toolkit \
    wafw00f \
    || echo "Some web tools failed to install, continuing..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    medusa \
    crackmapexec \
    evil-winrm \
    || echo "Some auth tools failed to install, continuing..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    radare2 \
    binwalk \
    gdb \
    checksec \
    binutils \
    || echo "Some binary analysis tools failed to install, continuing..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    foremost \
    steghide \
    exiftool \
    autopsy \
    sleuthkit \
    || echo "Some forensics tools failed to install, continuing..." && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Go for additional tools
RUN apt-get update && apt-get install -y golang-go && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Create virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel first
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY requirements.txt .

# Install dependencies with better error handling
RUN pip install --no-cache-dir -r requirements.txt || \
    (echo "Some packages failed, trying individual installation..." && \
     pip install --no-cache-dir Flask==2.3.3 && \
     pip install --no-cache-dir Flask-CORS==4.0.0 && \
     pip install --no-cache-dir flask-restx==1.3.0 && \
     pip install --no-cache-dir psutil==5.9.6 && \
     pip install --no-cache-dir requests==2.31.0 && \
     pip install --no-cache-dir beautifulsoup4==4.12.2 && \
     pip install --no-cache-dir selenium==4.15.2 && \
     pip install --no-cache-dir aiohttp && \
     pip install --no-cache-dir asyncio-mqtt==0.16.1 && \
     pip install --no-cache-dir paho-mqtt==1.6.1 && \
     pip install --no-cache-dir websockets && \
     pip install --no-cache-dir python-dotenv==1.0.0 && \
     pip install --no-cache-dir gunicorn==21.2.0 && \
     pip install --no-cache-dir prometheus-client==0.19.0)

# Copy application files
COPY hexstrike_server.py hexstrike_mcp.py ./
COPY assets/ ./assets/ 2>/dev/null || echo "Assets directory not found, skipping..."
COPY templates/ ./templates/ 2>/dev/null || echo "Templates directory not found, skipping..."
COPY static/ ./static/ 2>/dev/null || echo "Static directory not found, skipping..."
COPY api/ ./api/ 2>/dev/null || echo "API directory not found, skipping..."

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/config

# Copy and set up entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh 2>/dev/null || \
    echo '#!/bin/bash\necho "Starting HexStrike AI..."\nexec python3 hexstrike_server.py "$@"' > /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Expose port
EXPOSE 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8888/health || exit 1

# Create non-root user
RUN useradd -m -u 1000 hexstrike && \
    chown -R hexstrike:hexstrike /app /opt/venv
USER hexstrike

# Start the application
ENTRYPOINT ["/docker-entrypoint.sh"]